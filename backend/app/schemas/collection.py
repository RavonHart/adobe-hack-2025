import json
from pydantic import BaseModel, Field, field_validator
from typing import Optional, List, Any
from datetime import datetime

# --- Base Model ---
# This contains the common attributes shared across different models.
class CollectionBase(BaseModel):
    """
    Base Pydantic model for a collection.
    
    Contains fields that are common to both creating and reading a collection.
    """
    name: Optional[str] = Field(None, description="The name of the collection.")
    description: Optional[str] = Field(None, description="A brief description of the collection's purpose.")
    tags: Optional[List[str]] = Field(None, description="A list of tags for categorization.")

# --- Create Model ---
# This model is used for validating the request body when creating a new collection.
class CollectionCreate(CollectionBase):
    """
    Pydantic model for creating a new collection.
    
    Inherits from CollectionBase and makes the 'name' field required.
    """
    name: str = Field(..., description="The name of the collection is required on creation.")

# --- Update Model ---
# This model is used for validating the request body when updating an existing collection.
# All fields are optional, allowing for partial updates (PATCH requests).
class CollectionUpdate(CollectionBase):
    """
    Pydantic model for updating an existing collection.
    
    All fields are optional to allow for partial updates.
    """
    pass

# --- Response Model ---
# This model represents the data that will be sent back to the client.
# It includes fields that are generated by the server, like 'id' and timestamps.
class CollectionInDB(CollectionBase):
    """
    Pydantic model representing a collection as it is stored in the database.
    
    This model is used for API responses and includes database-generated fields.
    """
    id: str = Field(..., description="The unique identifier for the collection.")
    createdAt: datetime = Field(..., description="The timestamp when the collection was created.")
    updatedAt: Optional[datetime] = Field(None, description="The timestamp of the last update.")
    total_docs: int = Field(0, description="The total number of documents in the collection.")
    latestInsightId: Optional[str] = Field(None, description="ID of the latest insight generated for this collection.")
    latestPodcastId: Optional[str] = Field(None, description="ID of the latest podcast generated for this collection.")

    # FIX: Add a validator to parse the 'tags' field from a JSON string
    @field_validator('tags', mode='before')
    @classmethod
    def parse_tags(cls, v: Any) -> Optional[List[str]]:
        """
        If the input is a string, attempt to parse it as JSON.
        This handles the case where the 'tags' are stored as a JSON string
        in the database.
        """
        if isinstance(v, str):
            try:
                return json.loads(v)
            except json.JSONDecodeError:
                # Handle cases where the string might not be valid JSON
                return None
        return v

    class Config:
        """
        Pydantic configuration to allow creating the model from an ORM object.
        `from_attributes = True` enables FastAPI to automatically map SQLAlchemy
        model instances to this Pydantic model in API responses.
        """
        from_attributes = True
